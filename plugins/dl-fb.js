const axios = require("axios");
const { cmd } = require("../command");

cmd({
  pattern: "fb",
  alias: ["facebook"],
  desc: "Download Facebook videos",
  category: "download",
  filename: __filename
}, async (conn, m, store, {
  from,
  quoted,
  args,
  q,
  reply
}) => {
  try {
    if (!q || !q.startsWith("https://")) {
      return conn.sendMessage(from, { text: "*`Need URL`*" }, { quoted: m });
    }

    await conn.sendMessage(from, {
      react: { text: '‚è≥', key: m.key }
    });

    const apiUrl = `https://lance-frank-asta.onrender.com/api/downloader?url=${encodeURIComponent(q)}`;
    const { data } = await axios.get(apiUrl);
    
    const caption = `‚ï≠‚îÅ‚îÅ„Äå *FB DL* „Äç\n`
      + `‚îÉ‚ñ∏ *·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥*: ${fbData.result.duration}\n`
      + `‚ï∞‚îÅ‚îÅ‚îÅ‚™º\n\n`
      + `üåê *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥s:*\n`
      + `‚ù∂  *s·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*\n`
      + `‚ù∑  * ú·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*\n`
      + `üéµ *·¥Ä·¥ú·¥Ö…™·¥è ·¥è·¥ò·¥õ…™·¥è…¥s:*\n`
      + `‚ù∏  *·¥Ä·¥ú·¥Ö…™·¥è*\n`
      + `‚ùπ  *·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ*\n`
      + `‚ù∫  *·¥†·¥è…™·¥Ñ·¥á*\n\n`
      + `‚Ü™Ô∏è * Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥è…™·¥Ñ·¥á*`;

    const sentMsg = await conn.sendMessage(from, {
      image: { url: fbData.result.thumbnail },
      caption: caption
    }, { quoted: m });

    const messageID = sentMsg.key.id;

    conn.ev.on("messages.upsert", async (msgData) => {
      const receivedMsg = msgData.messages[0];
      if (!receivedMsg.message) return;

      const receivedText = receivedMsg.message.conversation || receivedMsg.message.extendedTextMessage?.text;
      const senderID = receivedMsg.key.remoteJid;
      const isReplyToBot = receivedMsg.message.extendedTextMessage?.contextInfo?.stanzaId === messageID;

      if (isReplyToBot) {
        await conn.sendMessage(senderID, {
          react: { text: '‚¨áÔ∏è', key: receivedMsg.key }
        });

        let videoLinks = fbData.result.links;

        switch (receivedText) {
          case "1":
            await conn.sendMessage(senderID, {
              video: { url: videoLinks.SD },
              caption: "üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™…¥ s·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*"
            }, { quoted: receivedMsg });
            break;

          case "2":
            await conn.sendMessage(senderID, {
              video: { url: videoLinks.HD },
              caption: "üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™…¥  ú·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*"
            }, { quoted: receivedMsg });
            break;

          case "3":
            await conn.sendMessage(senderID, {
              audio: { url: videoLinks.SD },
              mimetype: "audio/mpeg"
            }, { quoted: receivedMsg });
            break;

          case "4":
            await conn.sendMessage(senderID, {
              document: { url: videoLinks.SD },
              mimetype: "audio/mpeg",
              fileName: "Facebook_Audio.mp3",
              caption: "üì• *·¥Ä·¥ú·¥Ö…™·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥Äs ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ*"
            }, { quoted: receivedMsg });
            break;

          case "5":
            await conn.sendMessage(senderID, {
              audio: { url: videoLinks.SD },
              mimetype: "audio/mp4",
              ptt: true
            }, { quoted: receivedMsg });
            break;

          default:
            reply("*‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥! ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú 1, 2, 3, 4, or 5.*");
        }
      }
    });

  } catch (error) {
    console.error("Error:", error);
    reply("‚ùå Error fetching the video. Please try again.");
  }
});
