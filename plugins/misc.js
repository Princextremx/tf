const axios = require('axios');
const config = require('../config');
const { cmd, commands } = require('../command');
const util = require("util");
const { getAnti, setAnti, initializeAntiDeleteSettings } = require('../data/antidel');

initializeAntiDeleteSettings();

cmd({
    pattern: "antidelete",
    alias: ['antidel', 'ad'],
    desc: "Sets up the Antidelete",
    category: "misc",
    filename: __filename
},
async (conn, mek, m, { from, reply, q, text, isOwner, fromMe }) => {
    if (!isOwner) return reply('This command is only for the bot owner');
    try {
        const command = q?.toLowerCase();

        switch (command) {
            case 'on':
                await setAnti('gc', false);
                await setAnti('dm', false);
                return reply('_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á …™s …¥·¥è·¥° ·¥è“ì“ì “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás*_');

            case 'off gc':
                await setAnti('gc', false);
                return reply('_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö*_');

            case 'off dm':
                await setAnti('dm', false);
                return reply('_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á “ì·¥è Ä ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö*_');

            case 'set gc':
                const gcStatus = await getAnti('gc');
                await setAnti('gc', !gcStatus);
                return reply(`_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs ${!gcStatus ? '·¥á…¥·¥Ä ô ü·¥á·¥Ö' : '·¥Ö…™s·¥Ä ô ü·¥á·¥Ö'}*_`);

            case 'set dm':
                const dmStatus = await getAnti('dm');
                await setAnti('dm', !dmStatus);
                return reply(`_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á “ì·¥è Ä ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás ${!dmStatus ? '·¥á…¥·¥Ä ô ü·¥á·¥Ö' : '·¥Ö…™s·¥Ä ô ü·¥á·¥Ö'}*_`);

            case 'set all':
                await setAnti('gc', true);
                await setAnti('dm', true);
                return reply('_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥á·¥õ “ì·¥è Ä ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs*_');

            case 'status':
                const currentDmStatus = await getAnti('dm');
                const currentGcStatus = await getAnti('gc');
                return reply(`_*·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥õ·¥Ä·¥õ·¥ús*_\n\n*·¥Ö·¥ç ·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á:* ${currentDmStatus ? '·¥á…¥·¥Ä ô ü·¥á·¥Ö' : '·¥Ö…™s·¥Ä ô ü·¥á·¥Ö'}\n*…¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á:* ${currentGcStatus ? '·¥á…¥·¥Ä ô ü·¥á·¥Ö' : '·¥Ö…™s·¥Ä ô ü·¥á·¥Ö'}`);

            default:
                const helpMessage = `‚ï≠‚îÄ „Äå *\`COMMANDS GUIDE\`* „Äç
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á ·¥è…¥‚Äì·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á …¢ ü·¥è ô·¥Ä ü·¥á·¥ç·¥á…¥·¥õ
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á ·¥è“ì“ì …¢·¥Ñ‚Äì·¥Ö·¥ás·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á ·¥è“ì“ì ·¥Ö·¥ç‚Äì·¥Ö·¥ás·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ “ì·¥è Ä ·¥Ö·¥ç
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥á·¥õ …¢·¥Ñ‚Äì·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á/·¥Ö·¥ás·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á “ì·¥è Ä …¢ Ä·¥è·¥ú·¥òs
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥á·¥õ ·¥Ö·¥ç‚Äì·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á/·¥Ö·¥ás·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á “ì·¥è Ä ·¥Ö·¥ç
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥á·¥õ ·¥Ä ü ü‚Äì·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á “ì·¥è Ä ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs
‚îÇ‚Ä¢ .·¥Ä…¥·¥õ…™·¥Ö·¥á ü·¥á·¥õ·¥á s·¥õ·¥Ä·¥õ·¥ús‚Äì·¥†·¥áÃÅ Ä…™“ì…™·¥á  ü·¥á s·¥õ·¥Ä·¥õ·¥ú·¥õ ·¥Ä·¥Ñ·¥õ·¥ú·¥á ü
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç`;

                return reply(helpMessage);
        }
    } catch (e) {
        console.error("Error in antidelete command:", e);
        return reply("*_·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ_*");
    }
});


cmd({
    pattern: "vv3",
    alias: ['retrive', 'üî•'],
    desc: "Fetch and resend a ViewOnce message content (image/video).",
    category: "misc",
    use: '<query>',
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const quotedMessage = m.msg.contextInfo.quotedMessage; // Get quoted message

        if (quotedMessage && quotedMessage.viewOnceMessageV2) {
            const quot = quotedMessage.viewOnceMessageV2;
            if (quot.message.imageMessage) {
                let cap = quot.message.imageMessage.caption;
                let anu = await conn.downloadAndSaveMediaMessage(quot.message.imageMessage);
                return conn.sendMessage(from, { image: { url: anu }, caption: cap }, { quoted: mek });
            }
            if (quot.message.videoMessage) {
                let cap = quot.message.videoMessage.caption;
                let anu = await conn.downloadAndSaveMediaMessage(quot.message.videoMessage);
                return conn.sendMessage(from, { video: { url: anu }, caption: cap }, { quoted: mek });
            }
            if (quot.message.audioMessage) {
                let anu = await conn.downloadAndSaveMediaMessage(quot.message.audioMessage);
                return conn.sendMessage(from, { audio: { url: anu } }, { quoted: mek });
            }
        }

        // If there is no quoted message or it's not a ViewOnce message
        if (!m.quoted) return reply("Please reply to a ViewOnce message.");
        if (m.quoted.mtype === "viewOnceMessage") {
            if (m.quoted.message.imageMessage) {
                let cap = m.quoted.message.imageMessage.caption;
                let anu = await conn.downloadAndSaveMediaMessage(m.quoted.message.imageMessage);
                return conn.sendMessage(from, { image: { url: anu }, caption: cap }, { quoted: mek });
            }
            else if (m.quoted.message.videoMessage) {
                let cap = m.quoted.message.videoMessage.caption;
                let anu = await conn.downloadAndSaveMediaMessage(m.quoted.message.videoMessage);
                return conn.sendMessage(from, { video: { url: anu }, caption: cap }, { quoted: mek });
            }
        } else if (m.quoted.message.audioMessage) {
            let anu = await conn.downloadAndSaveMediaMessage(m.quoted.message.audioMessage);
            return conn.sendMessage(from, { audio: { url: anu } }, { quoted: mek });
        } else {
            return reply("This is not a ViewOnce message.");
        }
    } catch (e) {
        console.log("Error:", e);
        reply("An error occurred while fetching the ViewOnce message.");
    }
});

// if you want use the codes give me credit on your channel and repo in this file and my all files 
  
