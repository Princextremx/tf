const { cmd } = require('../command');
const crypto = require('crypto');
const webp = require('node-webpmux');
const axios = require('axios');
const fs = require('fs-extra');
const { exec } = require('child_process');
const { Sticker, createSticker, StickerTypes } = require("wa-sticker-formatter");
const Config = require('../config');

// Take Sticker 

cmd(
    {
        pattern: 'rename',
        alias: ['s', 'stake'],
        desc: 'Create a sticker with a custom pack name.',
        category: 'sticker',
        use: '<reply media or URL>',
        react: "ü§πüèª‚Äç‚ôÇÔ∏è",
        filename: __filename,
    },
    async (conn, mek, m, { quoted, args, q, reply, from }) => {
        if (!mek.quoted) return reply(`*_ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è s·¥õ…™·¥Ñ·¥ã·¥á Ä_*`);
        if (!q) return reply(`*_·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ò·¥Ä·¥Ñ·¥ã …¥·¥Ä·¥ç·¥á_*
> *·¥áx·¥á·¥ç·¥ò ü·¥á .·¥õ·¥Ä·¥ã·¥á ·¥ò Ä…™…¥·¥Ñ·¥á x·¥õ Ä·¥á·¥ç·¥á*`);

        let mime = mek.quoted.mtype;
        let pack = q;

        if (mime === "imageMessage" || mime === "stickerMessage") {
            let media = await mek.quoted.download();
            let sticker = new Sticker(media, {
                pack: pack, 
                type: StickerTypes.FULL,
                categories: ["ü§©", "üéâ"],
                id: "12345",
                quality: 75,
                background: 'transparent',
            });
            const buffer = await sticker.toBuffer();
            return conn.sendMessage(mek.chat, { sticker: buffer }, { quoted: mek });
        } else {
            return reply("*_·¥ú ú ú, ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á._*");
        }
    }
);

//Sticker create 

cmd(
    {
        pattern: 'take',
        alias: ['takes', 'stickergif'],
        desc: 'Create a sticker from an image, video, or URL.',
        category: 'sticker',
        use: '*_< Ä·¥á·¥ò ü è ·¥ç·¥á·¥Ö…™·¥Ä ·¥è Ä ·¥ú Ä ü>_*',
        react: "ü§πüèª‚Äç‚ôÇÔ∏è",
        filename: __filename,
    },
    async (conn, mek, m, { quoted, args, q, reply, from }) => {
        if (!mek.quoted) return reply(`*_ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è …™·¥ç·¥Ä…¢·¥á ·¥è Ä ·¥†…™·¥Ö·¥á·¥è, s…™ Ä._*`);
        let mime = mek.quoted.mtype;
        let pack = Config.STICKER_NAME || `${pushname}`;
        
        if (mime === "imageMessage" || mime === "stickerMessage") {
            let media = await mek.quoted.download();
            let sticker = new Sticker(media, {
                pack: pack, 
                type: StickerTypes.FULL,
                categories: ["ü§©", "üéâ"], 
                id: "12345",
                quality: 75, 
                background: 'transparent',
            });
            const buffer = await sticker.toBuffer();
            return conn.sendMessage(mek.chat, { sticker: buffer }, { quoted: mek });
        } else {
            return reply("*_·¥ú ú ú, ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á_*");
        }
    }
);

// JawadTechX
              
